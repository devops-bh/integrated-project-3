<!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8">
      <title><%= title %></title>
      <link rel='stylesheet' href='/stylesheets/style.css' />
      <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
      <link href="https://api.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.css" rel="stylesheet">
      <script src="https://api.mapbox.com/mapbox-gl-js/v2.13.0/mapbox-gl.js"></script>
      <script src='https://code.jquery.com/jquery-1.11.0.min.js'></script>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
      <link href="public\stylesheets\PD.css">
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
      <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
      <style>

        body {
            margin: 0;
            padding: 0;
            overflow-y:hidden; 
          }
          
        #map {
            position: absolute;
            top: auto;
            left: 0;
            right: 10%;
            width: 100%;
            height: 100%;
          }
          #markerReport {
              display: block;
              bottom: 5%;
              left: 30%;
              right: 0%;
              position:absolute;
              margin: 0px auto;
              width: 30%;
              height: 40px;
              padding: 10px;
              border: none;
              border-radius: 3px;
              font-size: 15px;
              text-align: center;
              color: #fff;
              background: #0ba310; 
            
              
              }
              #trashButton {
              display: block;
              bottom: 5%;
              left: 80%;
              right: 0%;
              position:absolute;
              margin: 0px auto;
              width: 10%;
              height: 40px;
              border: none;
              border-radius: 3px;
              font-size: 25px;
              text-align: center;
              color: #ececec;
              background: #0ba310; 
             
              }

              #marker-list-filter-input {
                position: fixed;
                top: 11vh;
                left: 3.5vw;
                z-index: 100;
                width: 16vw;
              }
              .marker-list-container {
                position: absolute;
                top: 14vh;
                left: 3.5vw;
                z-index: 100;
                width: 20vw;
                border: 2px solid black; 
                background-color: #ececec;
                max-height: 12vh; 
                overflow-y: scroll;
                overflow-x: hidden;
              }

              @media only screen and (max-width: 600px) {
                @keyframes slidein {
                  from {
                    transform: translateY(0%);
                  }

                  to {
                    transform: translateY(100%);
                  }
                }
                #marker-list-filter-input {
                      top: 18vh;
                      animation: slidein 2s forwards; 
                }
                .marker-list-container { 
                    top: 18.2vh;
                    animation: slidein 2s forwards; 
                }
              }


            .is-hidden {
              display: none !important;
            }
      </style>

</head>
<body>
  <%- include('./partials/navbar.ejs', {signed_in, score}) %>
  <input type="text" id="marker-list-filter-input" placeholder="Search for names..">
  <div class="marker-list-container">
    <div class="marker-list-widget" id="markers"></div>
  </div>

  <div id="map"></div>
  <script>
    const markerListWidget = document.querySelector("#markers")
    mapboxgl.accessToken = 'pk.eyJ1IjoiYmgzMDAiLCJhIjoiY2xlaWpsZW91MDI0dDQxbnI4aWNueTVneiJ9.u0cO3o-dzacQpUpt2rxLtA';

        // [refactor] this was the quickest/easiest way to implement getting the marker's details and sending them to the server, there may be alternative (better) approaches  
        let state = { newMarkerToAdd: null, eventIdToJoin: null, markersListed: 0, markerToMarkerAsClean: null }
        const signed_in = <%= signed_in %>;  
        
        // be careful, as one of these are obtained from the server; potential [refactor]
        let is_staff = false; 
        <% if (is_staff) { %>
          is_staff = true;
          <% } %>
        console.log("IS STAFF: ", is_staff) 
        
        let score = 0;
        console.log("Score: ", score)  

        const map = new mapboxgl.Map({
            container: 'map', // container ID
            // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
            style: 'mapbox://styles/mapbox/outdoors-v12', // style URL
            center: [-4.25424,55.86279], // starting position
            zoom: 13 // starting zoom

        });
        map.addControl(new mapboxgl.FullscreenControl());
        map.addControl(new mapboxgl.NavigationControl());//add zoom controllers and rotation
        //*********************************  
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            // When active the map will receive updates to the device's location as it changes..
            trackUserLocation: true,
            // Draw an arrow next to the location dot to indicate which direction the device is heading.
            showUserHeading: true
        })
        );
          // [refactor/feature] maybe introduce a "your markers" list 
          let othersMarkers = []
          let markers = []

          function addMarkerToMapWithAppropriatePopup(marker) {
            let lng = marker.lng
            let lat = marker.lat
            let _marker = new mapboxgl.Marker({ scale: 2, color: "orange" }).setLngLat(new mapboxgl.LngLat(lng, lat))
            if (is_staff && signed_in) {
              _marker.setPopup(new mapboxgl.Popup().setHTML(
              `<div class="text-center" id="marker-${marker.marker_id}">
                <p>${marker.title}</p>
                  <button type="submit" class="btn btn-success" button style="background-color:blue" onclick="joinEvent()">Join Event</button>
                  <button type="cancel" class="btn btn-success" onclick="markEventAsClean()">Mark as Clean</button>
                </div>
                `
                ))
                _marker.getElement().setAttribute("data-id", marker.marker_id)
              _marker.getElement().addEventListener("click", e => {
                state.eventIdToMarkAsClean = marker.marker_id
                console.log("Set state: ", state.eventIdToMarkAsClean)
              })
            } else if (signed_in) {
              // I think we should just use the marker's default event listener which is triggered on map.on 
              /* 
              < button id = "marker-button-${marker.marker_id}" type = "submit" onclick = "joinEvent()" dataset - userId="${marker.user_id}" dataset - markerId="${marker.marker_id}" class="btn btn-success" button style = "background-color:blue" > Join Event</ > 
              */ 
             // frustrating, setHTML only permits a string of HTML https://stackoverflow.com/questions/1750815/get-the-string-representation-of-a-dom-node
             let outerDiv = document.createElement("div")
             let joinEventButton = document.createElement("button")
             joinEventButton.id = "join-event-button"
              joinEventButton.classList.add("btn")
              joinEventButton.classList.add("btn-success")
              joinEventButton.classList.add("text-center")
              joinEventButton.style.cssText = "background-color:blue;display:block;position:relative;top:12px;margin:0 auto;"
              joinEventButton.appendChild(document.createElement("p").appendChild(document.createTextNode("Volunteer")))
              joinEventButton.setAttribute("data-markerId", marker.marker_id) // be careful as the attribute name may be entirely lowercase when using dataset.etc
              joinEventButton.classList.add("join-event-button") 
              let containerDiv = document.createElement("div")
              containerDiv.setAttribute("id", "marker-popup-"+marker.marker_id)
              containerDiv.setAttribute("data-markerId", marker.marker_id)  // be careful as the attribute name may be entirely lowercase when using dataset.etc
              containerDiv.classList.add("text-center")
              // [todo] have the width stretch for longer text 
              containerDiv.style.cssText = "margin-left:2vw;margin-right:2vw;font-size:32px;" 
              containerDiv.appendChild(document.createElement("strong").appendChild(document.createTextNode(marker.title))) 
              containerDiv.appendChild(joinEventButton)
              let isVolunteerTextEl = document.createElement("strong")
              isVolunteerTextEl.appendChild(document.createTextNode("Thankyou for volunteering"))
              isVolunteerTextEl.style.cssText = "display:block;font-size:20px;margin-top:12px;"
              containerDiv.appendChild(isVolunteerTextEl)
              isVolunteerTextEl.classList.add("ty-for-volunteering")
              isVolunteerTextEl.classList.add("d-none")
              outerDiv.appendChild(containerDiv)
              
          //document.body.insertBefore(newDiv, currentDiv);
          
          _marker.getElement().dataset.markerId = marker.marker_id
          _marker.setPopup(new mapboxgl.Popup().setHTML(outerDiv.innerHTML))
          
          // https://stackoverflow.com/a/34896387
          document.addEventListener("click", function (e) {
            const target = e.target.closest("#join-event-button"); // Or any other selector.
            if (target) {
              //console.log("joinevent: ", target)
              /*
                  joinEvent()
                  Array.from(e.target.parentNode.childNodes).map(childNode => {
                    childNode.classList.remove("d-none")
                  })
                  */
                 Array.from(document.querySelectorAll(".join-event-button")).map(_joinEventButton => {
                   if (target.dataset["markerid"] == marker.marker_id) {
                     _joinEventButton.parentElement.querySelector(".ty-for-volunteering").classList.remove("d-none")
                     joinEvent()
                     target.remove()
                   }
                 })
                }
              }); 

              /* // can delete this, just keeping it as a reference 
              _marker.setPopup(new mapboxgl.Popup().setHTML(
                `<div class="text-center" id="marker-popup-${marker.marker_id}" dataset-markerId="${marker.marker_id}"> 
                  <p>${marker.title}</p>
                </div>`
                ))
               // I think we should just use the marker's default event listener which is triggered on map.on 
              _marker.getElement().dataset.markerId = marker.marker_id
              _marker.setPopup(new mapboxgl.Popup().setHTML(
                `<div class="text-center" id="marker-popup-${marker.marker_id}" dataset-markerId="${marker.marker_id}"> 
                <p>${marker.title}</p>
                <button id="marker-button-${marker.marker_id}" type="submit" onclick="joinEvent()" dataset-userId="${marker.user_id}" dataset-markerId="${marker.marker_id}" class="btn btn-success" button style="background-color:blue">Join Event</button> 
                </div>`
              ))
              */
            } else {
              _marker.setPopup(new mapboxgl.Popup().setHTML(
                // [refactor] maybe rename "marker" distinguish the marker data from the marker itself better 
                `<div>${marker.user_id}: Marker cotent
                  <p>${marker.title}</p>
                    <br /><a href="/sign-in">Please sign in to participate</a>
                  </div>`
              ))
            }
            _marker.addTo(map)
            //markerListWidget.innerHTML += `<a style="display:block;" data-lat="${marker.lat}" data-lng="${marker.lng}" id="${marker.markerId}" class="listed-marker" href="#${marker.markerId}">Location-${state.markersListed}</a>`
            const markerListItem = document.createElement("div");
            const textNode = document.createTextNode(`Location-${marker.title}`);
            markerListItem.appendChild(textNode)
            markerListItem.setAttribute('data-lat', marker.lat)
            markerListItem.setAttribute('data-lng', marker.lng)
            markerListItem.setAttribute('data-id', marker.markerId)
            markerListItem.setAttribute('data-title', marker.title)
            markerListItem.addEventListener("click", e => {
              e.preventDefault()
              console.log(e.target.dataset.id, marker.markerId) // will  likely yield ?, undefined 
              map.flyTo({
                center: [Number(e.target.dataset.lng), Number(e.target.dataset.lat)],
                essential: true,
                duration: 3000
              });
            })
            document.querySelector(".marker-list-widget").appendChild(markerListItem);
          }

          // [todo] fetch the markers which were added whilst the user was not looking at the map (e.g. on another page) 
          fetch("/markers") // make a request to the server 
            .then((response) => response.json())
            .then((data) => {
              console.log(data)
              // we got the markers, now time to display 
              let markers = data
              markers.map((marker,i) => {
                console.log(i)
                addMarkerToMapWithAppropriatePopup(marker)
                //markerListWidget.innerHTML += `<a style="display:block;" data-lat="${marker.lat}" data-lng="${marker.lng}" class="listed-marker" href="${marker.marker_id}">Location-${i}</a>`
              });
              document.querySelector("#marker-list-filter-input").addEventListener("keyup", e => {
                const inputtedValue = e.target.value.toLowerCase()
                console.log(inputtedValue)
                  listedMarkersEl.forEach(el => {
                    if (el.textContent.toLowerCase().includes(inputtedValue)) {
                      el.classList.remove("is-hidden");
                    } else {
                      el.classList.add("is-hidden");
                    }
                })
            })
            //state.markersListed = listedMarkersEl.length
        })
            
          // [todo] I don't think this will get pre-existing markers so this will be for markers added when the user is looking at the map 
          let eventSource = new EventSource("/users/events/");

          eventSource.onmessage = event => { // [todo] distinguish the users' already added markers from other users' markers 
            const marker = JSON.parse(event.data).marker
            addMarkerToMapWithAppropriatePopup(marker)
          };

          /* 
          document.querySelectorAll(".listed-marker").forEach(el => {
            console.log("ID: ", e.target.dataset.id, e.target.dataset.lng, e.target.dataset.lat)
              el.addEventListener("click", e => {
                e.preventDefault()
                map.flyTo({
                  center: [Number(e.target.dataset.lng), Number(e.target.dataset.lat)],
                  essential: true,
                  duration: 3000
                });
              })
            })
            */ 

          //click on the map, then click on the "Add new Marker" to add new marker       
          map.on('click', e => {
            // is this user-experience suitable? Maybe displaying the marker's popup content is more encouraging to get the user to participate?
            if (!e.originalEvent.target.parentNode.parentNode.classList.contains("mapboxgl-marker") && !signed_in) {
              alert("Please sign in");
              return; 
            } 
            if (e.originalEvent.target.parentNode.parentNode.classList.contains("mapboxgl-marker")) {
              return;
            }

            if (signed_in && e.originalEvent.target.parentNode.parentNode.classList.contains("mapboxgl-marker")) {
              if (e.originalEvent.target.parentNode.parentNode.dataset.markerId == undefined) return;
              state.eventIdToJoin = e.originalEvent.target.parentNode.parentNode.dataset.markerId
              return; 
            } 

            if (is_staff && signed_in && e.originalEvent.target.parentNode.parentNode.classList.contains("mapboxgl-marker")) {
              if (e.originalEvent.target.parentNode.parentNode.dataset.markerId == undefined) return;
              return; 
            } 


          const coordinates = e.lngLat;
              // [refactor] there's likely a better way to organize this but this will do for now 
              let _marker = new mapboxgl.Marker({scale: 2}).setLngLat(coordinates)
            if (signed_in) {
                _marker.setLngLat(coordinates).setPopup(new mapboxgl.Popup().setHTML(
                        '<div class="mb-3 mt-3">'+
                          '<label for="firstname" class="form-label">Title:</label>'+
                          '<input type="text" class="form-control" class="title" placeholder="Enter Title" name="title" required>'+
                        '</div>'+

                        '<div class="mb-3 mt-3">'+
                        '<label for="date" class="form-label">Date:</label>'+
                        '<input type="date" class="form-control" id="date" name="date" required>'+
                        '</div>'+

                        '<div class="mb-3 mt-3">' +
                        '<label for="firstname" class="form-label">Number of people needed:</label>' +
                        '<input type="number" class="form-control" id="peopleN" placeholder="Enter Number" name="peopleN" required>'+
                        '</div>'+
                        '<div class="mb-3 mt-3">'+
                        
                        '<div class="mb-3 mt-3">'+
                        '<label for="firstname" class="form-label">Amount Of Garbage:</label>'+
                        '<br>'+
                        '<div class="form-check form-check-inline">'+
                          '<input  class="form-check-input" type="radio" id="inlineCheckbox1" name="optradio" value="option1">'+
                          '<label class="form-check-label" for="inlineCheckbox1">Small</label>'+
                        '</div>'+
                        '<div class="form-check form-check-inline">'+
                          '<input  class="form-check-input" type="radio" id="inlineCheckbox2" name="optradio" value="option2">'+
                          '<label class="form-check-label" for="inlineCheckbox2">Medium</label>'+
                          '</div>'+
                          '<div class="form-check form-check-inline">'+
                            '<input class="form-check-input" type="radio" id="inlineCheckbox3" name="optradio" value="option3">'+
                            '<label class="form-check-label" for="inlineCheckbox3">Large</label>'+
                            '</div>'+
                            '</div>'+                            
                            
                            '<div class="text-center">'+
                              '<button type="cancel" class="btn btn-danger" onclick="removeMarker()">Cancel</button>'+
                              '<button type="submit" id="add-marker" onClick="addMarker()" class="btn btn-success" >Submit</button>'+
                              '</div>'+
                              
                              '</form>'+
                              '</div>'
                      ))

                      state.newMarkerToAdd = { lng: coordinates.lng, lat: coordinates.lat  }
                    }
                _marker.addTo(map);
                markers.push(_marker);
        });
        


        function removeMarker()
        {
          // remove all markers added by user 
          markers.forEach((marker) => marker.remove());  
        };
        
        let userId = -1; 
        <% if (user_id && user_id != -1) { %>
          userId = "<%= user_id %>";
        <% } %>
        function addMarker() { // [refactor] there may be a proper way of attaching event listeners to the popup but this was the quickest/easiest way 
          // [todo] use a similar (or better) approach to get the event details e.g. name of event 
          const title = document.querySelector(".mapboxgl-popup-content").querySelector("input").value
          state.newMarkerToAdd.title = title // isn't actually needed 
          const { lat, lng } = state.newMarkerToAdd
          const data = { userId, lat, lng, title } // should probably change to user_id: userId but the server does this (thus expects userId)
          fetch("users/add-marker", {
               method: "POST", // or 'PUT'
               headers: {
                 "Content-Type": "application/json",
               },
               body: JSON.stringify(data),
             })
               .then((response) => response.json())
               .then((data) => {
                 console.log("Success:", data);
                 alert("Your marker has been added")
               })
               .catch((error) => {
                 console.error("Error:", error);
               });
               //remove all unsubmitted markers
               markers.forEach((marker) => marker.remove());  
           }


          function joinEvent() {
            // [todo] implement communication with server etc 
            if (!signed_in) {
              alert("Please sign into join events")
            }
            const markerId = state.eventIdToJoin 
            fetch("users/volunteer", {
              method: "POST", // or 'PUT'
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                user_id: userId, marker_id: markerId
              }),
            })
              .then((response) => response.json()).then((data) => {
                console.log("Success:", data);
                alert("You are now a participant of " + markerId)
              })
              .catch((error) => {
                console.error("Error:", error);
              });            
          }

          async function markEventAsClean() {
            if (!signed_in && !is_staff) {
              alert("Only staff can mark events as clean")
            }
            document.querySelectorAll(".mapboxgl-marker").forEach(marker => {
             console.log(marker.dataset)
             if (marker.dataset.id == state.eventIdToMarkAsClean) {
               document.querySelectorAll(".mapboxgl-popup").forEach(popup => popup.remove())
               marker.remove()
             }
            })
            await fetch("users/markEventAsClean", {
              method: "POST", // or 'PUT'
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                marker_id: state.eventIdToMarkAsClean
              }),
            })
          } 
    </script>
  </body>
</html>
