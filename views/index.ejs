<!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8">
      <title><%= title %></title>
      <link rel='stylesheet' href='/stylesheets/style.css' />
      <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
      <link href="https://api.mapbox.com/mapbox-gl-js/v2.12.0/mapbox-gl.css" rel="stylesheet">
      <script src="https://api.mapbox.com/mapbox-gl-js/v2.12.0/mapbox-gl.js"></script>
      <script src='https://code.jquery.com/jquery-1.11.0.min.js'></script>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
      <style>

        body {
            margin: 0;
            padding: 0;
          }
          
        #map {
            position: absolute;
            top: auto;
            left: 0;
            right: 10%;
            width: 100%;
            height: 100%;
          }
   
      </style>

</head>
<body>
  <%- include('./partials/navbar', {signed_in: signed_in}) %>
    <div id="map"></div>
    <script>
        /*
        TODO: 
            - render a map - done 
            - add a marker to the map - done 
            - dynamically add markers to the map - postponed (can't do this since we don't have any server logic)
                - [instead] loop through a JS object which contains where the markers will go 
                - add the marker to the map 
            - allow the user to add a marker to the map on click of the button 
                - Giacomo: at the moment the user will manually type their coordinates, later we'll get the coordinates via where the user clicked the map - done
                - Patrick: add an html input field - done
                - Patrick: add a html button - done
                - when the user clicks button 
                - get the content of the input field 
                - update the markers array in the above JS object - in progress
        */

        mapboxgl.accessToken = 'pk.eyJ1IjoiYmgzMDAiLCJhIjoiY2xlaWpsZW91MDI0dDQxbnI4aWNueTVneiJ9.u0cO3o-dzacQpUpt2rxLtA';
        // - render a map - done

        // [refactor] this was the quickest/easiest way to implement getting the marker's details and sending them to the server, there may be alternative (better) approaches  
        let state = {newMarkerToAdd: null}

        const map = new mapboxgl.Map({
            container: 'map', // container ID
            // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
            style: 'mapbox://styles/mapbox/outdoors-v12', // style URL
            center: [11.255, 43.77], // starting position
            zoom: 13 // starting zoom

        });
        map.addControl(new mapboxgl.FullscreenControl());
        map.addControl(new mapboxgl.NavigationControl());//add zoom controllers and rotation
        //*********************************  
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            // When active the map will receive updates to the device's location as it changes.
            trackUserLocation: true,
            // Draw an arrow next to the location dot to indicate which direction the device is heading.
            showUserHeading: true
        })
      );
        
        // [refactor/feature] maybe introduce a "your markers" list 
        let othersMarkers = []
        let markers = []

        // [todo] fetch the markers which were added whilst the user was not looking at the map (e.g. on another page) 
        
        // [todo] I don't think this will get pre-existing markers so this will be for markers added when the user is looking at the map 
        let eventSource = new EventSource("/users/events/");
        const userId = Math.random() * 10 // [refactor] will likely be generated via server side as a UUID  
        
        eventSource.onmessage = event => { // [todo] distinguish the users' already added markers from other users' markers 
          const parsedData = JSON.parse(event.data)
          const {lat, lng} = parsedData.marker
          let lngLat = { lng: lng, lat: lat }
          console.log("New marker added: " , lngLat)
          let _marker = new mapboxgl.Marker({ scale: 2, color: "orange" }).setLngLat(lngLat) 
          // [todo] set the popup here to allow a user to edit their marked litter event? 
          _marker.addTo(map)
        };

        
         map.on('click', e => {
          const signed_in = <%= signed_in %>;
          if (!signed_in) {
            alert("Please sign in");
            return;
          } 

            const coordinates = e.lngLat;
            // [refactor] there's likely a better way to organize this but this will do for now 
            let _marker = new mapboxgl.Marker({ scale: 2 }).setLngLat(coordinates)
            state.newMarkerToAdd = {lng: coordinates.lng, lat: coordinates.lat}
             _marker.setPopup(new mapboxgl.Popup().setHTML(
               '<h1>user content</h1>' +
               `<div>
                          <input type = "text" name = "name"  placeholder = "name">
                            <button class="add-marker" onClick="addMarker()">report litter</button>
                          </div>` + // [refactor] maybe not the most readable (or secure) way (also input type="submit" > button?) 
               // do we want our own report litter page? 
               '<button class="trigger">Upload Photo</button>' +
               '<button class="trigger">Take Photo</button>' +
               '<button class="trigger">Litter Removed</button>')).togglePopup()
           _marker.addTo(map)
        });

        
        function addMarker() { // [refactor] there may be a proper way of attaching event listeners to the popup but this was the quickest/easiest way 
          // [todo] use a similar (or better) approach to get the event details e.g. name of event 
          const {lat, lng} = state.newMarkerToAdd
          const data = {userId, lat, lng}
          fetch("users/add-marker", {
            method: "POST", // or 'PUT'
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          })
            .then((response) => response.json())
            .then((data) => {
              console.log("Success:", data);
              alert("Your marker has been added")
            })
            .catch((error) => {
              console.error("Error:", error);
            });
      }
    </script>
  </body>
</html>